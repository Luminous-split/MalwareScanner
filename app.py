from flask import Flask, render_template, request, redirect, url_for, jsonify, send_file, flash
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
import pandas as pd
import requests
import os
from upload import upload
from result import get_result
from result_table import result_table, file_info
from datetime import datetime
from ml_train import decisiontree_classifier_model, randomforest_classifier_model
import platform


scan_history_list = []

app = Flask(__name__)

app.secret_key = 'secret_key'  
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'  # Redirect to the login page if not logged in

# Dummy user store
users = {'admin': {'password': 'password123'},
         'kaung': {'password': 'password123'}
    }  

class User(UserMixin):
    def __init__(self, username):
        self.username = username
    def get_id(self):
        return self.username

@login_manager.user_loader
def load_user(username):
    return User(username) if username in users else None

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        user = users.get(username)

        if username == 'kaung' and user['password'] == password:
            user_obj = User(username)
            login_user(user_obj)
            return redirect(url_for('home'))
        elif username == 'admin' and user['password'] == password:
            return render_template('admin.html')
        else:
            flash('Invalid username or password.')
    return render_template('login.html')

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('login'))

@app.route('/')
@login_required
def home():
    return render_template('index.html', scan_history_list=scan_history_list)

@app.route('/upload', methods=['POST'])
def upload_file():
    try:
        file = request.files['file']
        global name_of_file
        name_of_file  = file.filename

        global data_frame
        data_frame = pd.DataFrame(result_table())
        
        return redirect(url_for('scan_history'))   
    except:
        return render_template("error.html", error_message="Problem occurs in normal uploading...")

@app.route('/download')
def download_file():
    try:
        timestamp = datetime.now().strftime('%d%m%H%M')

        file_name = f'scan_results_{timestamp}.xlsx'
        file_path = os.path.join(os.getcwd(), file_name)

        data_frame.to_excel(file_path, index=False)

        return send_file(file_path, as_attachment=True, download_name=file_name)
    except:
        return render_template("error.html", error_message="Problem occurs in downloading file...")

@app.route('/scan_history')
def scan_history():
    try:
        timestamp = datetime.now().strftime('%d-%m-%Y %H:%M')
        os_info = platform.version()

        scan_result_id = len(scan_history_list) + 1  
        scan_result_link = url_for('scan_result', scan_id=scan_result_id)
        # Append scan data to the history
        if not name_of_file in [i['file_name'] for i in scan_history_list]:
            scan_history_list.append({
                'file_name': name_of_file,
                'date': timestamp,
                'scan_result_link': scan_result_link})

            return render_template('scan_history.html', scan_history_list=scan_history_list)
        else:
            return render_template('scan_history.html', scan_history_list=scan_history_list)
    except:
        return render_template("error.html", error_message="Problem occurs in checking history...")

@app.route('/scan_result/<int:scan_id>')
def scan_result(scan_id):
    try:
        table_html = data_frame.to_html(classes='table table-striped table-bordered', index=False)
        return render_template('scan_result.html', table_html=table_html, name_of_file=name_of_file)
    except:
        return render_template("error.html", error_message="Problem occurs in displying result...")

@app.route('/ml_scanner')
def ml_scanner():
    directory = 'models'
    models = os.listdir(directory)
    
    return render_template('ml_index.html', models=models)

@app.route('/ml_upload', methods=['POST'])
def ml_upload_file():
    try:
        chosenOption = request.form.get('chosenOption')
        features, values, predict = upload(chosenOption)  
        data_frame = pd.DataFrame({"The Features Used": features, "Values": values})
        table_html = data_frame.to_html(classes='table table-striped table-bordered', index=False)
        return render_template('ml_scan_result.html', table_html=table_html , predict=predict)
    except:
        return render_template("error.html", error_message="Error occurs in uploading(Ml-scan) file...")

@app.route('/models')
def models():
    directory = 'models'

    score_frame = pd.read_csv('score.csv', header=None, names=['Model', 'Dataset', 'Accuracy'])

    score = score_frame.set_index('Model').T.to_dict('list')

    models = os.listdir(directory)
    return render_template("models.html", files=models, score=score)

@app.route('/delete/<filename>', methods=['POST'])
def delete_model(filename):
    directory = 'models'
    file_path = os.path.join(directory, filename)
    
    os.remove(file_path)  # Delete the file   
    return redirect(url_for('models'))

@app.route('/train_model', methods=['POST'])
def train_model():
    try:
        if 'file' not in request.files:
            return redirect(request.url)
        
        file = request.files['file']
        
        if file.filename == '':
            return flash('Invalid upload dataset file!')

        # Save the file to the upload folder
        file_path = os.path.join('datasets', file.filename)
        file.save(file_path)

        chosenOption = request.form.get('chosenOption')
        model_types = ['RandomForestClassifier', 'DecisionTreeClassifier']
        if chosenOption == model_types[0]:
            randomforest_classifier_model(file_path)            
        else:
            decisiontree_classifier_model(file_path)
        return redirect(url_for('models'))
            
    except:
        return render_template('admin_error.html', error_message='Something went wrong in training Model...')
        

@app.route('/help')
def help():
    return render_template('help.html')

@app.route('/contact')
def contact():
    return render_template('contact_us.html')


if __name__ == '__main__':
    port = 2523
    print(f"\n * Successfully hosted app on port {port}!\n")
    app.run('0.0.0.0', port=port, debug=True)
