import os
import hashlib
import requests
from config import api_key, url
from flask import request, jsonify
from ml_scan import predict

UPLOAD_FOLDER = "uploads"  # Folder to save uploaded files
ALLOWED_EXTENSIONS = {'exe', 'dll', 'bin', 'apk', 'zip', 'pdf', 'jpg', 'png', 'jpeg'}

def allowed_file(filename):
    """Check if the file has an allowed extension."""
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def hash_file(file_path, hash_function="sha256"):
    """Generate the hash of a file for duplicate check."""
    hash_func = hashlib.new(hash_function)
    with open(file_path, 'rb') as f:
        while chunk := f.read(8192):
            hash_func.update(chunk)
    return hash_func.hexdigest()

def check_if_file_exists(file_hash):
    """Check if a file with the same hash already exists."""
    history_file = os.path.join(UPLOAD_FOLDER, 'file_history.txt')  # Store file hashes
    if os.path.exists(history_file):
        with open(history_file, 'r') as f:
            uploaded_hashes = f.read().splitlines()
            return file_hash in uploaded_hashes
    return False

def save_file_hash(file_hash):
    """Save the file hash to the file history."""
    history_file = os.path.join(UPLOAD_FOLDER, 'file_history.txt')
    with open(history_file, 'a') as f:
        f.write(file_hash + '\n')

def upload(model=None):
    """Handle file upload and VirusTotal scanning."""
    if 'file' not in request.files:
        return jsonify({"error": "No file part"}), 400
    
    file = request.files['file']

    if file.filename == '':
        print("error No selected file")
        return jsonify({"error": "No selected file"}), 400
    
    if not allowed_file(file.filename):
        print("error file not allowed")
        return jsonify({"error": f"File type not allowed. Allowed types: {', '.join(ALLOWED_EXTENSIONS)}"}), 400
    
    # Save file temporarily
    file_path = os.path.join(UPLOAD_FOLDER, file.filename)
    
    # Save file to server
    file.save(file_path)
    
    # Generate file hash (e.g., SHA256)
    file_hash = hash_file(file_path)
    
    # Check if the file has already been uploaded by hash
    if check_if_file_exists(file_hash):
        # File already uploaded - proceed with follow-up functions
        if model == None:
            with open(file_path, 'rb') as f:
                files = {"file": f}
                params = {'apikey': api_key}
                response = requests.post(url, files=files, params=params)
                return response
        else:
            return predict(file_path, model)

    else:
        save_file_hash(file_hash)
        with open(file_path, 'rb') as f:
            files = {"file": f}
            params = {'apikey': api_key}
            response = requests.post(url, files=files, params=params)
            return response